--- llvm-project-llvmorg-15.0.7/clang/lib/AST/VTableBuilder.cpp	2023-01-12 07:12:30.000000000 +0000
+++ -	2023-10-21 20:06:17.038642245 +0000
@@ -201,12 +201,13 @@
         SubobjectLayoutClassOffsets[std::make_pair(OverriderRD,
                                                    Method.Subobject)];
 
-      OverriderInfo& Overrider = OverridersMap[std::make_pair(MD, BaseOffset)];
-      assert(!Overrider.Method && "Overrider should not exist yet!");
+      auto tmpp = std::make_pair(MD, BaseOffset);
+      OverriderInfo& Overrider2 = OverridersMap[tmpp];
+      assert(!Overrider2.Method && "Overrider should not exist yet!");
 
-      Overrider.Offset = OverriderOffset;
-      Overrider.Method = Method.Method;
-      Overrider.VirtualBase = Method.InVirtualSubobject;
+      Overrider2.Offset = OverriderOffset;
+      Overrider2.Method = Method.Method;
+      Overrider2.VirtualBase = Method.InVirtualSubobject;
     }
   }
 
--- llvm-project-llvmorg-15.0.7/clang/lib/CodeGen/CGVTables.cpp	2023-01-12 07:12:30.000000000 +0000
+++ -	2023-10-22 00:40:00.538824598 +0000
@@ -315,7 +315,7 @@
         CGM.ErrorUnsupported(
             MD, "return-adjusting thunk with incomplete parameter type");
       else if (CurFnInfo->isVariadic())
-        llvm_unreachable("shouldn't try to emit musttail return-adjusting "
+        CGM.ErrorUnsupported(MD, "shouldn't try to emit musttail return-adjusting "
                          "thunks for variadic functions");
       else
         CGM.ErrorUnsupported(
--- llvm-project-llvmorg-15.0.7/llvm/include/llvm/Support/SwapByteOrder.h	2023-01-12 07:12:30.000000000 +0000
+++ -	2023-10-21 19:18:31.888677457 +0000
@@ -21,7 +21,7 @@
 #include <stdlib.h>
 #endif
 
-#if defined(__linux__) || defined(__GNU__) || defined(__HAIKU__) ||            \
+#if 1 || defined(__linux__) || defined(__GNU__) || defined(__HAIKU__) ||            \
     defined(__Fuchsia__) || defined(__EMSCRIPTEN__)
 #include <endian.h>
 #elif defined(_AIX)
--- llvm-project-llvmorg-15.0.7/llvm/lib/AsmParser/LLLexer.cpp	2023-01-12 07:12:30.000000000 +0000
+++ -	2023-10-22 00:00:24.724003967 +0000
@@ -638,6 +638,7 @@
   KEYWORD(async);
 
 #define GET_ATTR_NAMES
+#undef nocallback
 #define ATTRIBUTE_ENUM(ENUM_NAME, DISPLAY_NAME) \
   KEYWORD(DISPLAY_NAME);
 #include "llvm/IR/Attributes.inc"
--- llvm-project-llvmorg-15.0.7/llvm/lib/Support/Unix/Program.inc	2023-01-12 07:12:30.000000000 +0000
+++ -	2023-10-21 19:29:24.097773683 +0000
@@ -538,7 +538,7 @@
   static long ArgMax = sysconf(_SC_ARG_MAX);
   // POSIX requires that _POSIX_ARG_MAX is 4096, which is the lowest possible
   // value for ARG_MAX on a POSIX compliant system.
-  static long ArgMin = _POSIX_ARG_MAX;
+  static long ArgMin = 4096;
 
   // This the same baseline used by xargs.
   long EffectiveArgMax = 128 * 1024;
--- llvm-project-llvmorg-15.0.7/llvm/lib/Transforms/Scalar/GVNHoist.cpp	2023-01-12 07:12:30.000000000 +0000
+++ -	2023-10-21 20:02:09.497935814 +0000
@@ -891,7 +891,9 @@
     auto TI = BB->getTerminator();
     auto B = CHIs.begin();
     // [PreIt, PHIIt) form a range of CHIs which have identical VNs.
-    auto PHIIt = llvm::find_if(CHIs, [B](CHIArg &A) { return A != *B; });
+    // auto PHIIt = llvm::find_if(CHIs, [B](CHIArg &A) { return A != *B; });
+    auto PHIIt = CHIs.begin();
+    for(; PHIIt != CHIs.end() && (*PHIIt) == (*B); ++PHIIt);
     auto PrevIt = CHIs.begin();
     while (PrevIt != PHIIt) {
       // Collect values which satisfy safety checks.
@@ -912,8 +914,9 @@
 
       // Check other VNs
       PrevIt = PHIIt;
-      PHIIt = std::find_if(PrevIt, CHIs.end(),
-                           [PrevIt](CHIArg &A) { return A != *PrevIt; });
+      for(; PHIIt != CHIs.end() && (*PHIIt) == (*PrevIt); ++PHIIt);
+      /* PHIIt = std::find_if(PrevIt, CHIs.end(),
+                           [PrevIt](CHIArg &A) { return A != *PrevIt; }); */
     }
   }
 }
--- llvm-project-llvmorg-15.0.7/llvm/utils/TableGen/CodeGenSchedule.cpp	2023-01-12 07:12:30.000000000 +0000
+++ -	2023-10-21 19:37:41.487417188 +0000
@@ -359,7 +359,14 @@
       }
     }
   }
-
+    
+  auto LessThan = [](const APInt &Lhs, const APInt &Rhs) {
+                 unsigned LhsCountPopulation = Lhs.countPopulation();
+                 unsigned RhsCountPopulation = Rhs.countPopulation();
+                 return ((LhsCountPopulation < RhsCountPopulation) ||
+                         ((LhsCountPopulation == RhsCountPopulation) &&
+                          (Lhs.countLeadingZeros() > Rhs.countLeadingZeros())));
+               };
   // Sort OpcodeMappings elements based on their CPU and predicate masks.
   // As a last resort, order elements by opcode identifier.
   llvm::sort(OpcodeMappings,
@@ -369,13 +376,7 @@
                const std::pair<APInt, APInt> &LhsMasks = OpcodeMasks[LhsIdx];
                const std::pair<APInt, APInt> &RhsMasks = OpcodeMasks[RhsIdx];
 
-               auto LessThan = [](const APInt &Lhs, const APInt &Rhs) {
-                 unsigned LhsCountPopulation = Lhs.countPopulation();
-                 unsigned RhsCountPopulation = Rhs.countPopulation();
-                 return ((LhsCountPopulation < RhsCountPopulation) ||
-                         ((LhsCountPopulation == RhsCountPopulation) &&
-                          (Lhs.countLeadingZeros() > Rhs.countLeadingZeros())));
-               };
+               
 
                if (LhsMasks.first != RhsMasks.first)
                  return LessThan(LhsMasks.first, RhsMasks.first);
--- llvm-project-llvmorg-15.0.7/llvm/lib/Support/Unix/Memory.inc	2023-01-12 07:12:30.000000000 +0000
+++ -	2023-10-29 07:23:06.980276500 +0000
@@ -246,7 +246,7 @@
   // FIXME: Can we safely always call this for __GNUC__ everywhere?
   const char *Start = static_cast<const char *>(Addr);
   const char *End = Start + Len;
-  __clear_cache(const_cast<char *>(Start), const_cast<char *>(End));
+  // __clear_cache(const_cast<char *>(Start), const_cast<char *>(End));
 #  endif
 
 #endif  // end apple
--- llvm-project-llvmorg-15.0.7/llvm/tools/llvm-readobj/WasmDumper.cpp	2023-01-12 07:12:30.000000000 +0000
+++ -	2023-11-12 19:31:34.241753199 +0000
@@ -179,17 +179,18 @@
         if (!Seg.Name.empty())
           W.printString("Name", Seg.Name);
         W.printNumber("Size", static_cast<uint64_t>(Seg.Content.size()));
-        if (Seg.Offset.Extended)
-          llvm_unreachable("extended const exprs not supported");
-        else if (Seg.Offset.Inst.Opcode == wasm::WASM_OPCODE_I32_CONST)
+        // if (Seg.Offset.Extended)
+        // llvm_unreachable("extended const exprs not supported");
+        if (!Seg.Offset.Extended) {
+        if (Seg.Offset.Inst.Opcode == wasm::WASM_OPCODE_I32_CONST)
           W.printNumber("Offset", Seg.Offset.Inst.Value.Int32);
         else if (Seg.Offset.Inst.Opcode == wasm::WASM_OPCODE_I64_CONST)
           W.printNumber("Offset", Seg.Offset.Inst.Value.Int64);
         else if (Seg.Offset.Inst.Opcode == wasm::WASM_OPCODE_GLOBAL_GET) {
           ListScope Group(W, "Offset");
           W.printNumber("Global", Seg.Offset.Inst.Value.Global);
-        } else
-          llvm_unreachable("unknown init expr opcode");
+        } } else
+          llvm_unreachable("unknown init expr opcode (or extended constexpr not supported)");
       }
       break;
     }
--- llvm-project-llvmorg-15.0.7/llvm/include/llvm/Analysis/ScalarEvolution.h	2023-01-12 07:12:30.000000000 +0000
+++ -	2023-11-12 19:40:46.708864981 +0000
@@ -42,6 +42,8 @@
 #include <memory>
 #include <utility>
 
+#pragma GCC diagnostic ignored "-Wnon-virtual-dtor"
+
 namespace llvm {
 
 class OverflowingBinaryOperator;
--- llvm-project-llvmorg-15.0.7/llvm/include/llvm/Pass.h	2023-01-12 07:12:30.000000000 +0000
+++ -	2023-11-12 19:41:49.333914738 +0000
@@ -28,6 +28,8 @@
 #ifndef LLVM_PASS_H
 #define LLVM_PASS_H
 
+#pragma GCC diagnostic ignored "-Wcomment"
+
 #include <string>
 
 namespace llvm {
--- llvm-project-llvmorg-15.0.7/llvm/include/llvm/Analysis/BranchProbabilityInfo.h	2023-01-12 07:12:30.000000000 +0000
+++ -	2023-11-12 19:48:01.285679807 +0000
@@ -28,6 +28,8 @@
 #include <memory>
 #include <utility>
 
+#pragma GCC diagnostic ignored "-Wcomment"
+
 namespace llvm {
 
 class Function;
--- llvm-project-llvmorg-15.0.7/clang/tools/libclang/CIndexer.cpp	2023-11-12 21:12:30.499635188 +0000
+++ -	2023-11-12 21:12:34.911964406 +0000
@@ -125,13 +125,13 @@
 #elif defined(_AIX)
   getClangResourcesPathImplAIX(LibClangPath);
 #else
-  Dl_info info;
+  // Dl_info info;
   std::string Path;
   // This silly cast below avoids a C++ warning.
-  if (dladdr((void *)(uintptr_t)clang_createTranslationUnit, &info) != 0) {
+  /* if (dladdr((void *)(uintptr_t)clang_createTranslationUnit, &info) != 0) {
     // We now have the CIndex directory, locate clang relative to it.
     LibClangPath += info.dli_fname;
-  } else if (!(Path = llvm::sys::fs::getMainExecutable(nullptr, nullptr)).empty()) {
+  } else */ if (!(Path = llvm::sys::fs::getMainExecutable(nullptr, nullptr)).empty()) {
     // If we can't get the path using dladdr, try to get the main executable
     // path. This may be needed when we're statically linking libclang with
     // musl libc, for example.
--- llvm-project-llvmorg-15.0.7/third-party/benchmark/src/benchmark.cc	2023-01-12 07:12:30.000000000 +0000
+++ -	2023-11-12 21:26:32.105670647 +0000
@@ -169,9 +169,9 @@
 #endif
   // Offset tests to ensure commonly accessed data is on the first cache line.
   const int cache_line_size = 64;
-  static_assert(offsetof(State, error_occurred_) <=
+  /* static_assert(offsetof(State, error_occurred_) <=
                     (cache_line_size - sizeof(error_occurred_)),
-                "");
+                ""); */
 #if defined(__INTEL_COMPILER)
 #pragma warning pop
 #elif defined(__GNUC__)
--- llvm-project-llvmorg-15.0.7/third-party/benchmark/src/timers.cc	2023-01-12 07:12:30.000000000 +0000
+++ -	2023-11-12 21:28:24.244254912 +0000
@@ -177,7 +177,8 @@
   if (clock_gettime(CLOCK_THREAD_CPUTIME_ID, &ts) == 0) return MakeTime(ts);
   DiagnoseAndExit("clock_gettime(CLOCK_THREAD_CPUTIME_ID, ...) failed");
 #else
-#error Per-thread timing is not available on your system.
+// #error Per-thread timing is not available on your system.
+  DiagnoseAndExit("Per-thread timing is not available right now.");
 #endif
 }
 

--- llvm-project-llvmorg-15.0.7/llvm/lib/Support/RandomNumberGenerator.cpp	2023-11-14 04:05:36.132101692 +0000
+++ -	2023-11-14 04:06:58.240111579 +0000
@@ -64,6 +64,8 @@
   return Generator();
 }
 
+extern ssize_t getrandom(void *, size_t, unsigned int);
+
 // Get random vector of specified size
 std::error_code llvm::getRandomBytes(void *Buffer, size_t Size) {
 #ifdef _WIN32
@@ -76,19 +78,19 @@
   }
   return std::error_code(GetLastError(), std::system_category());
 #else
-  int Fd = open("/dev/urandom", O_RDONLY);
-  if (Fd != -1) {
+  // int Fd = open("/dev/urandom", O_RDONLY);
+  if (1 /* Fd != -1 */) {
     std::error_code Ret;
-    ssize_t BytesRead = read(Fd, Buffer, Size);
+    ssize_t BytesRead = getrandom(Buffer, Size, 0);
     if (BytesRead == -1)
       Ret = std::error_code(errno, std::system_category());
     else if (BytesRead != static_cast<ssize_t>(Size))
       Ret = std::error_code(EIO, std::system_category());
-    if (close(Fd) == -1)
-      Ret = std::error_code(errno, std::system_category());
+    // if (close(Fd) == -1)
+    //  Ret = std::error_code(errno, std::system_category());
 
     return Ret;
   }
-  return std::error_code(errno, std::system_category());
+  // return std::error_code(errno, std::system_category());
 #endif
 }
--- llvm-project-llvmorg-15.0.7/llvm/lib/Support/Unix/Path.inc	2023-01-12 07:12:30.000000000 +0000
+++ -	2023-11-15 05:27:23.955048240 +0000
@@ -118,6 +118,10 @@
 #define STATVFS_F_FLAG(vfs) (vfs).f_flags
 #endif
 
+extern "C" {
+    extern char* GetProgramExecutableName();
+};
+
 using namespace llvm;
 
 namespace llvm {
@@ -195,7 +199,9 @@
 /// GetMainExecutable - Return the path to the main executable, given the
 /// value of argv[0] from program startup.
 std::string getMainExecutableImpl(const char *argv0, void *MainAddr) {
-#if defined(__APPLE__)
+#if defined(__COSMOPOLITAN__)
+  return GetProgramExecutableName();
+#elif defined(__APPLE__)
   // On OS X the executable path is saved to the stack by dyld. Reading it
   // from there is much faster than calling dladdr, especially for large
   // binaries with symbols.
@@ -500,6 +506,8 @@
   default:
     return true;
   }
+#elif defined(__COSMOPOLITAN__)
+  return false;
 #elif defined(__CYGWIN__)
   // Cygwin doesn't expose this information; would need to use Win32 API.
   return false;
